-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
python-blosc_cffi version: 1.8.2.dev0
Blosc version: 1.16.3 ($Date:: 2019-03-08 #$)
Compressors available: ['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']
Compressor library versions:
  BloscLZ: 1.1.0
  LZ4: 1.8.3
  Snappy: 1.1.1
  Zlib: 1.2.8
  Zstd: 1.3.8
Python version: 3.6.7 (default, Oct 22 2018, 11:32:17) 
[GCC 8.2.0]
Platform: Linux-4.15.0-48-generic-x86_64 (#51-Ubuntu SMP Wed Apr 3 08:28:49 UTC 2019)
Linux dist: elementary 5.0
Processor: x86_64
Byte-ordering: little
Detected cores: 8
Number of threads to use by default: 4
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Creating a large NumPy array with 10**8 int64 elements:
  [       0        1        2 ... 99999997 99999998 99999999]
  Time for copying array with np.copy():     0.288 s

Using *** blosclz *** compressor::
  Time for pack_array/unpack_array:     0.654/0.387 s.	Compr ratio: 150.11
  Time for compress_ptr/decompress_ptr: 0.056/0.079 s.	Compr ratio: 152.37
Using *** lz4 *** compressor::
  Time for pack_array/unpack_array:     0.666/0.455 s.	Compr ratio: 151.70
  Time for compress_ptr/decompress_ptr: 0.060/0.117 s.	Compr ratio: 152.14
Using *** lz4hc *** compressor::
  Time for pack_array/unpack_array:     0.747/0.456 s.	Compr ratio: 151.79
  Time for compress_ptr/decompress_ptr: 0.129/0.119 s.	Compr ratio: 152.14
Using *** snappy *** compressor::
  Time for pack_array/unpack_array:     0.700/0.496 s.	Compr ratio: 20.40
  Time for compress_ptr/decompress_ptr: 0.079/0.164 s.	Compr ratio: 20.40
Using *** zlib *** compressor::
  Time for pack_array/unpack_array:     1.721/0.799 s.	Compr ratio: 310.43
  Time for compress_ptr/decompress_ptr: 1.093/0.487 s.	Compr ratio: 312.12
Using *** zstd *** compressor::
  Time for pack_array/unpack_array:     1.113/0.437 s.	Compr ratio: 454.00
  Time for compress_ptr/decompress_ptr: 0.520/0.124 s.	Compr ratio: 463.69
